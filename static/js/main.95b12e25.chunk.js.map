{"version":3,"sources":["location-marker.js","map-component.js","sunrise-and-sunset-times.js","reportWebVitals.js","index.js"],"names":["LocationMarker","props","useEffect","setChosenPosition","position","useState","chosenPosition","useMapEvent","event","getPositionInfo","latlng","useMap","flyTo","Marker","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","iconSize","iconAnchor","MapComponent","MapContainer","center","zoom","style","height","width","TileLayer","attribution","url","prototype","options","SunriseAndSunsetTimes","latitude","setLatitude","longitude","setLongitude","timeData","setTimeData","startDate","Date","endDate","key","date","setDate","lat","lng","timeDataArr","getTimes","a","fetch","method","then","result","json","data","push","dateFormatted","isEqual","format","daysAsArray","eachDayOfInterval","start","end","i","length","dayLengthCalc","sunset","results","match","sunrise","sunsetArray","split","sunriseArray","dayLength","Number","hours","Math","floor","toString","minutes","seconds","Fragment","id","value","onChange","target","item","selection","showSelectionPreview","moveRangeOnFirstSelection","ranges","onClick","isDataValid","undefined","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b12e25.chunk.js","sourcesContent":["import { Marker, useMapEvent, useMap } from 'react-leaflet';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nfunction LocationMarker(props) {\r\n    useEffect(() => {\r\n        setChosenPosition(props.position);\r\n    }, [props.position])\r\n\r\n    const [chosenPosition, setChosenPosition] = useState(props.position);\r\n    useMapEvent(\r\n        'click', (event) => {\r\n            props.getPositionInfo(event.latlng);\r\n            setChosenPosition(event.latlng)\r\n        }\r\n    );\r\n    const map = useMap();\r\n    map.flyTo(chosenPosition);\r\n    return <Marker position={chosenPosition}></Marker>;\r\n}\r\n\r\nexport { LocationMarker };","import React from 'react';\r\nimport L from 'leaflet';\r\nimport {    MapContainer, TileLayer  } from 'react-leaflet';\r\nimport { LocationMarker } from './location-marker';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport icon from 'leaflet/dist/images/marker-icon.png';\r\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\r\n\r\n/*kaardikomponendi jaoks tahtsin algselt kasutada juhendis antud linki https://leafletjs.com/examples/quick-start/, \r\naga kuna projekt on tehtud Reactiga, siis rohkem kasutasin libraryt React Leaflet https://react-leaflet.js.org/docs/start-introduction*/\r\n\r\n/*alljärgnev on võetud Stackoverflowst. Markeri ikoon on React Leafletis puudu, tuleb ise lisada (https://stackoverflow.com/questions/49441600/react-leaflet-marker-files-not-found). \r\nSamuti tuleb ikoonile lisada ankur, et marker osutaks sinna, kuhu kasutaja kaardil klõpsas (https://stackoverflow.com/questions/62865155/when-creating-a-marker-onclick-the-marker-is-offset-and-not-directly-where-the).*/\r\nlet DefaultIcon = L.icon({\r\n    iconUrl: icon,\r\n    shadowUrl: iconShadow,\r\n    iconSize: [32, 37], \r\n    iconAnchor: [16, 37], \r\n});\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\nexport default function MapComponent(props) {\r\n  return (\r\n    <MapContainer center={props.position} zoom={13} style={{ height: \"400px\", width: \"800px\" }}>\r\n      <TileLayer\r\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n        <LocationMarker position={props.position} getPositionInfo={props.getPositionInfo}/>\r\n    </MapContainer>\r\n  );\r\n};","import React, { useState } from 'react';\r\nimport MapComponent from './map-component';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport 'react-date-range/dist/styles.css';\r\nimport 'react-date-range/dist/theme/default.css';\r\nimport { eachDayOfInterval, format, isEqual } from 'date-fns';\r\nimport { DateRange } from 'react-date-range';\r\n\r\nfunction SunriseAndSunsetTimes(){\r\n    const [latitude, setLatitude] = useState(58.378025);\r\n    const [longitude, setLongitude] = useState(26.728493);\r\n    const [timeData, setTimeData] = useState([]);\r\n    const [date, setDate] = useState([\r\n        {\r\n        startDate: new Date(),\r\n        endDate: new Date(),\r\n        key: 'selection'\r\n        }\r\n    ]);\r\n    let position = { lat: latitude, lng: longitude };\r\n    let timeDataArr = [];\r\n\r\n    //kasutasin tõusude ja loojangute leidmiseks järgnevat APIt: https://sunrise-sunset.org/api \r\n    async function getTimes(lat, lng, date) { \r\n        await fetch(`https://api.sunrise-sunset.org/json?lat=${lat}&lng=${lng}&date=${date}&formatted=0`, {\r\n                method: 'GET',\r\n            })\r\n            .then(result => result.json())\r\n            .then(function(data) {\r\n                timeDataArr.push(data);\r\n            })\r\n    }\r\n\r\n    async function isDataValid(lat, lng, date) {\r\n        let dateFormatted = ''\r\n        position = { lat: lat, lng: lng };\r\n        //kuupäevadega seotud meetodid pärinevad allikast https://date-fns.org/v2.21.1/docs/\r\n        if (isEqual(date[0].startDate, date[0].endDate)){\r\n            dateFormatted = format(date[0].startDate, 'yyyy-MM-dd');\r\n            await getTimes (lat, lng, dateFormatted)\r\n        } else {\r\n            let daysAsArray = eachDayOfInterval({\r\n                start: date[0].startDate,\r\n                end: date[0].endDate\r\n            })\r\n            for (let i = 0; i < daysAsArray.length; i++) {\r\n                dateFormatted = format(daysAsArray[i], 'yyyy-MM-dd');\r\n                await getTimes (lat, lng, dateFormatted)\r\n            }\r\n        }\r\n        setTimeData(timeDataArr);\r\n    }\r\n\r\n    const getPositionInfo = function(data) {\r\n        setLatitude(data.lat);\r\n        setLongitude(data.lng);\r\n        position = { lat: data.lat, lng: data.lng };\r\n    }\r\n\r\n    const dayLengthCalc = function(timeData) {\r\n        let sunset = timeData.results.sunset.match(/\\d\\d:\\d\\d:\\d\\d/)[0];\r\n        let sunrise = timeData.results.sunrise.match(/\\d\\d:\\d\\d:\\d\\d/)[0];\r\n        let sunsetArray = sunset.split(':');\r\n        let sunriseArray = sunrise.split(':');\r\n        let dayLength = (Number(sunsetArray[0]) * 3600 + Number(sunsetArray[1]) * 60 + Number(sunsetArray[2])) - (Number(sunriseArray[0])*60*60 + Number(sunriseArray[1])*60 + Number(sunriseArray[2]));\r\n        let hours = Math.floor(dayLength / 3600);\r\n        if (hours < 10) {\r\n            hours = '0' + hours.toString();\r\n        }\r\n        let minutes = Math.floor(dayLength % 3600 / 60);\r\n        if (minutes < 10) {\r\n            minutes = '0' + minutes.toString();\r\n        }\r\n        let seconds = dayLength % 3600 % 60;\r\n        if (seconds < 10) {\r\n            seconds = '0' + seconds.toString();\r\n        }\r\n        let dayLengthFormatted = hours + ':' + minutes + ':' + seconds;\r\n        return [sunrise, sunset, dayLengthFormatted];\r\n    }\r\n\r\n    return (\r\n       <React.Fragment>\r\n           <h1>Päikese tõusu ja loojangu ajad ning päeva pikkus</h1>\r\n           <p>Rakendus võimaldab kuvada Päikese tõusu ja loojangu ajad ning päeva pikkuse sõltuvalt kuupäevadest ja koordinaatidest. \r\n               Koordinaadid saab sisestada kas käsitsi või valides kaardil soovitud koha. Kui valida üks kuupäev, kuvatakse tõusu, loojangu ajad \r\n               ning päeva pikkus tekstina. Mitme kuupäeva valimise puhul ei juhtu midagi, sest äpp loeb APIst vajalikud andmed küll sisse, aga \r\n               paraku ei jäänud aega, et neid graafikule kuvada.</p>\r\n           <p>Sisesta geograafiline laius:</p>\r\n           <input id=\"latitude\" value={latitude} onChange={event => setLatitude(event.target.value)}></input>\r\n           <p>Sisesta geograafiline pikkus:</p>\r\n           <input id=\"longitude\" value={longitude} onChange={event => setLongitude(event.target.value)}></input>\r\n           <p>Vali kuupäev:</p>\r\n           {/*kalendri kuvamiseks kasutasin https://hypeserver.github.io/react-date-range/*/}\r\n           <DateRange\r\n                onChange={item => setDate([item.selection])}\r\n                showSelectionPreview={true}\r\n                moveRangeOnFirstSelection={false}\r\n                ranges={date}\r\n            />\r\n           <br />\r\n           <button onClick={() => isDataValid(latitude, longitude, date)}>Näita tulemust!</button>\r\n           {(timeData.length !== undefined && timeData.length === 1) ? <p>Päike tõuseb kell {dayLengthCalc(timeData[0])[0]} UTC ja loojub kell {dayLengthCalc(timeData[0])[1]} UTC. Päeva pikkus on {dayLengthCalc(timeData[0])[2]}.</p> : <p></p>}\r\n           <MapComponent position={position} getPositionInfo={getPositionInfo}/>\r\n       </React.Fragment> \r\n    )\r\n}\r\n\r\nexport default SunriseAndSunsetTimes;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SunriseAndSunsetTimes from './sunrise-and-sunset-times';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SunriseAndSunsetTimes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}